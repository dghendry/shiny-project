}
get_code()
get_code <- function() {
t <- readLines("./app.R")
code <- cat(t,"\n")
code <- tidy_source(text=code)
return(code)
}
get_code()
runApp()
runApp()
runApp()
?cat()
runApp()
runApp()
runApp()
renderT
?renderText
runApp()
?readLines()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
t <- c(" line1", "line2", "line3")
t <- lapply(t,paste0("\n"))
t <- lapply(t,paste0,"\n")
t
runApp()
make_book_list_names_query()
source('~/Documents/__INFO-201/12code/shiny/nytimes/Source/nytimes_api_functions.R')
source('~/Documents/__INFO-201/12code/shiny/nytimes/Source/nytimes_api_functions.R')
source('~/Documents/__INFO-201/12code/shiny/nytimes/Source/nytimes_api_functions.R')
# install.packages("httr")
# install.packages("jsonlite")
library("httr")
library("jsonlite")
library("stringr")
source("./source/nytimes_api_key.R")
#----------------------------------------------
# Make call to a URI and process the data
# https://cran.r-project.org/web/packages/httr/vignettes/quickstart.html
#----------------------------------------------
call_uri <- function(base_uri, endpoint, query_params) {
# Make the uri string
resource_uri <- paste0(base_uri, endpoint)
# Send the query off with uri string and the query paramters
# We are assuming that everything works - which is a very big assumption
# The network could time out - the query could fail - etc.
# Ideally a lot of error-handing is required here
response <- GET(resource_uri, query = query_params)
# Get the response back - as a long character string
response_text <- content(response, type = "text", encoding = "UTF-8")
# Convert the text string into an R object that can be processed in R
response_data <- fromJSON(response_text)
return(response_data)
}
source('~/Documents/__INFO-201/12code/shiny/nytimes/Source/nytimes_api_functions.R')
#----------------------------------------------
# This function get the best selling books for a category,
# passed in as book_list_name. Note: the default is "hardcover-fiction"
# https://api.nytimes.com/svc/books/v3/lists/current/hardcover-fiction.json?api-key=XXX
# Note: This value "api-key" is a problem for R.  Why? What is the solution?
# Search on: "r list identifier with dash"
# See: https://stackoverflow.com/questions/36312953/including-a-dash-in-an-argument-name-in-r
#----------------------------------------------
make_basic_nytimes_list_query <- function(book_list_name = "hardcover-fiction") {
query_params <- list("api-key" = NYTIMES_KEY)
base_uri <- "https://api.nytimes.com/svc/books/v3/lists/current"
endpoint <- paste0("/", book_list_name, ".json")
response_data <- call_uri(base_uri, endpoint, query_params)
# By inspection with str() we determined that books is a data frame
# that we can work with. Note the data frame within the data frame
df <- response_data$results$books
return(df)
}
#----------------------------------------------
# This takes a book list query and makes it look
# nice - not perfect but okay for now.
#----------------------------------------------
book_list_query_to_title <- function(query) {
t <- str_replace_all(query, "-", " ")
t <- str_to_title(t)
return(t)
}
#----------------------------------------------
# This will return a list of book lists. For example:
#    hardcover-fiction
#    hardcover-nonfiction
#    trade-fiction-paperback
#    ...
# There are about 50 such book lists.
#----------------------------------------------
make_book_list_names_query <- function() {
query_params <- list("api-key" = NYTIMES_KEY)
base_uri <- "https://api.nytimes.com/svc/books/v3/lists"
endpoint <- "/names"
response_data <- call_uri(base_uri, endpoint, query_params)
# The following conversion is required for making the queries
df <- response_data$results$list_name
df <- tolower(df)
df <- str_replace_all(df, " ", "-")
df <- sort(df)
return(df)
}
#----------------------------------------------
# Get a list of books in mardown
#----------------------------------------------
get_markdown_book_list <- function() {
t <- paste("-", make_book_list_names_query(), collapse = "\n")
return(t)
}
#----------------------------------------------
# Select a random book list - useful for
# testing and fun too
#----------------------------------------------
get_random_book_list_query <- function() {
query_list <- make_book_list_names_query()
# Use sample to get a random number beween 1 and X
n <- sample(1:length(query_list), 1, replace = TRUE)
book_list_name <- query_list[n]
return(book_list_name)
}
#----------------------------------------------
# Create a simple bibliograhic item
# Note: By data wrangling the data fields in
# the variable, book, we could add a lot of
# information to this bibiliography record.
# It is meant to be printed in a markdown
# document.
#----------------------------------------------
get_book_bib_item <- function(book_rank, book_list) {
# If there is nothing in the data frame, book, return immediately
book <- book_list[book_list$rank == book_rank, ]
if (is.null(book) | nrow(book) == 0) {
return("")
}
# Extact some basic info about the book
b_title <- book$title
b_author <- book$author
b_review_link <- book$book_review_link
b_descr <- book$description
# Create a review string if necessary
bib_title <- ""
if (b_review_link != "") {
bib_title <- paste0("_", b_title, "_ by ", b_author, " (<a href='", b_review_link, "'>Review</a>)", collapse = "")
}
else {
bib_title <- paste0("_", b_title, "_ by ", b_author, collapse = "")
}
# Add the description to the bibliograhic item
bib_title <- paste0(bib_title, "<br>", b_descr, collapse = "")
return(bib_title)
}
#----------------------------------------------
# Get the top books for a particular list
#----------------------------------------------
get_nytimes_top_x_book_list <- function(num, book_list_name = "hardcover-fiction") {
book_list <- make_basic_nytimes_list_query(book_list_name)
if (nrow(book_list) < num) {
num <- nrow(book_list)
}
titles <- lapply(seq(1:num), get_book_bib_item, book_list)
# This gives us a bullet list for markdown
t <- paste("- ", titles, collapse = "\n")
return(t)
}
get_markdown_book_list()
runApp()
runApp()
source('~/Documents/__INFO-201/12code/shiny/nytimes/Source/html_functions.R')
# filename: html_functions.R
#----------------------------------------------
# Functions for creating HTML
#----------------------------------------------
library(knitr)
#install.packages("formatR")
library("formatR")
get_code <- function() {
t <- readLines("./app.R")
code <- cat(t,"\n\n")
#code <- tidy_source(text=code)
return(code)
}
#----------------------------------------------
# Create HTML using tags. In general, this is
# probably the most effective way to create
# HTML documents and render them in Shiny
# applications.
#
# For list of all the tags, see:
# https://shiny.rstudio.com/articles/tag-glossary.html
#----------------------------------------------
get_comment_text_with_tags <- function() {
debug_msg("in: get_comment_text_with_tags()")
doc <- tags$div(
hr(),                                        # horizontal rule
h1("Hello"),                                 # heading 1 (big)
p("Calling: get_comment_text_with_tags()"),  # a paragraph
p("Once upon a time... "),                   # another
p("The end."),                               # last paragraph
hr()                                         # horizontal rule
)
debug_msg("out: get_comment_text_with_tags()")
# Note: doc is a Shiny tag oobject
return(doc)
}
#----------------------------------------------
# Create HTML using strings  - same as above but done
# with text. Note beginning and ending HTML tags.
#----------------------------------------------
get_comment_text_with_HTML <- function() {
txt <- "<hr><h1>Hello</h1>"
txt <- paste0(txt,"<p>Calling: get_comment_text_with_HTML()</p>")
txt <- paste0(txt,"<p>Once upon a time... </p>")
txt <- paste0(txt,"<p>The end.</p>")
txt <- paste0(txt,"<hr></div>")
# Note: This returns HTML that can be rendered correctly by renderUI
return (div(HTML(txt)))
}
#----------------------------------------------
# Create HTML by reading a file
#----------------------------------------------
get_comment_text_from_HTML_file <- function(fn) {
return(includeHTML(fn))
}
#----------------------------------------------
# Create HTML by reading a Markdown file
#----------------------------------------------
get_text_from_md_file <- function(fn) {
return(div(HTML(markdown::markdownToHTML(fn))))
}
get_text_from_md_string <- function(md_txt) {
return(div(HTML(markdown::markdownToHTML(text=md_txt))))
}
#----------------------------------------------
# Create HTML from markdown - note new lines ("\n")
# Type Markdown and have it converted to HTML
#----------------------------------------------
get_comment_text_with_md1 <- function() {
txt <- "# Hello\n"
txt <- paste0(txt,"_Calling_: get_comment_text_with_md1()\n\n")
txt <- paste0(txt,"Once upon a time... \n\n")
txt <- paste0(txt,"The end.\n\n")
# Note: This returns HTML that can be rendered correctly by renderUI
return (get_text_from_md_string(txt))
}
runApp()
runApp()
runApp()
?renderUI()
library("htmltools")
runApp()
runApp()
runApp()
tabPanel()
?tabPanel()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
source('~/Documents/__INFO-201/12code/shiny/nytimes/Source/html_functions.R')
runApp()
?req()
runApp()
runApp()
select_input_list
select_input_list
source('~/Documents/__INFO-201/12code/shiny/nytimes/Source/nytimes_api_functions.R')
book_list          <- make_book_list_names_query()
book_list_df       <- data.frame(query=book_list, stringsAsFactors=FALSE)
book_list_df$id    <- seq(1,length(book_list))
book_list_df$title <- lapply(book_list_df$query,book_list_query_to_title)
select_input_list  <- list(book_list_df$title,book_list_df$query)
View(book_list_df)
print(select_input_list)
runApp()
runApp()
runApp()
?setNames()
namedList(c("a","b"),int=seq(1,2))
?namedList()
t <- list()
t[["a"]] <- "aa"
t[[b]]
t[["b"]] <- "bb"
t
runApp()
runApp()
runApp()
#install.packages("formatR")
library(knitr)
library(formatR)
book_list          <- make_book_list_names_query()
source('~/Documents/__INFO-201/12code/shiny/nytimes/Source/nytimes_api_functions.R')
#install.packages("formatR")
library(knitr)
library(formatR)
book_list          <- make_book_list_names_query()
book_list_df       <- data.frame(query=book_list, stringsAsFactors=FALSE)
book_list_df$id    <- seq(1,length(book_list))
book_list_df$title <- lapply(book_list_df$query,book_list_query_to_title)
#select_input_list  <- list(book_list_df$title,book_list_df$query)
#select_input_list <- setNames(as.list(book_list_df$title, book_list_df$query))
View(book_list_df)
add_to_named_list <- function(name,value,named_list) {
named_list[[name]] <- value
return (named_list)
}
x <- list()
add_to_named_list("a","aa",x)
add_to_named_list("b","bb",x)
x
print(x)
add_to_named_list <- function(name,value,named_list) {
named_list[[name]] <- value
return (named_list)
}
lapply(book_list_df$id,add_to_named_list,book_list_df$title,select_input_list)
add_to_named_list <- function(name,value,named_list) {
named_list[[name]] <- value
return (named_list)
}
select_input_list <- list()
lapply(book_list_df$id,add_to_named_list,book_list_df$title,select_input_list)
source('~/Documents/__INFO-201/12code/shiny/nytimes/Source/html_functions.R')
shiny::runApp()
source('~/Documents/__INFO-201/12code/shiny/nytimes/Source/nytimes_api_functions.R')
runApp()
source('~/Documents/__INFO-201/12code/shiny/nytimes/Source/html_functions.R')
runApp()
length(select_input_list)
length(select_input_list)
book_list          <- make_book_list_names_query()
book_list_df       <- data.frame(query=book_list, stringsAsFactors=FALSE)
book_list_df$id    <- seq(1,length(book_list))
book_list_df$title <- lapply(book_list_df$query,book_list_query_to_title)
View(book_list_df)
add_to_named_list <- function(name,value,named_list) {
named_list[[name]] <- value
return (named_list)
}
select_input_list <- list()
lapply(book_list_df$id,add_to_named_list,book_list_df$title,select_input_list)
length(select_input_list)
x <- list()
x[["a"]] <- "aa"
x[["b"]] <- "bb"
]]
x[["b"]] <- "bb"
x
length(x)
x[["c"]] <- "cc"
length(x)
View(select_input_list)
select_input_list
add_to_named_list <- function(name,value,named_list) {
named_list[[name]] <- value
return (named_list)
}
select_input_list <- list()
t <- lapply(book_list_df$id,add_to_named_list,book_list_df$title,select_input_list)
t
length(t)
?View9t
View(t)
add_to_named_list <- function(name,value,named_list) {
named_list[name] <- value
return (named_list)
}
select_input_list <- list()
t <- lapply(book_list_df$id,add_to_named_list,book_list_df$title,select_input_list)
warnings()
lapply()
?lappy()
>lapply()
?lapply()
a <- list(n1 = "hi", n2 = "hello")
c(a,setNames(list("hola"),paste("another","name",sep="_")))
a <- list(n1 = "hi", n2 = "hello")
c(a,setNames(list("hola"),paste("another","name",sep="_")))
a <- "a"
aa <- "aa"
a <- list(n1 = "hi", n2 = "hello")
c(a,setNames(list(a),aa)
)
b <- "b"
bb <- "bb"
a <- list(n1 = "hi", n2 = "hello")
a <- list(n1 = "hi", n2 = "hello")
c(a,setNames(list(b),bb)
)
a <- list(n1 = "hi", n2 = "hello")
c(a,setNames(list(bb),b)
)
add_to_named_list <- function(name,value,named_list) {
# named_list[[name]] <- value
# return (named_list)
t <- c(name_list,setNames(list(value),name))
return(t)
}
select_input_list <- list()
t <- lapply(book_list_df$id,add_to_named_list,book_list_df$title,select_input_list)
add_to_named_list <- function(name,value,named_list) {
# named_list[[name]] <- value
# return (named_list)
t <- c(named_list,setNames(list(value),name))
return(t)
}
select_input_list <- list()
t <- lapply(book_list_df$id,add_to_named_list,book_list_df$title,select_input_list)
View(t)
lenght(t)
length(t)
str(t)
c("Cylinders" = "cyl",
"Transmission" = "am",
"Gears" = "gear")
t <-  c("Cylinders" = "cyl",
"Transmission" = "am",
"Gears" = "gear")
str(t)
t <- c("a","b","c","d")
names(t) <- c("aa","bb","cc","dd")
print(t)
t<-book_list_df$id
View(book_list_df$title)
View(book_list_df$title)
names(t) <- book_list_df$title
print(t)
View(t)
t<-book_list_df$query
names(t) <- book_list_df$title
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
get_nytimes_top_x_book_list(10,"science")
source('~/Documents/__INFO-201/12code/shiny/nytimes/Source/nytimes_api_functions.R')
runApp()
runApp()
runApp()
ls
pwd
?is.na()
runApp()
runApp()
styler:::style_active_file()
styler:::style_active_file()
runApp()
runApp()
runApp()
runApp()
runApp()
styler:::style_active_file()
styler:::style_selection()
styler:::style_active_file()
styler:::style_active_file()
source('~/Documents/__INFO-201/12code/shiny/nytimes/Source/html_functions.R')
source('~/Documents/__INFO-201/12code/shiny/nytimes/Source/html_functions.R')
styler:::style_active_file()
styler:::style_active_file()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
# install.packages("formatR")
library(knitr)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
install.packages('rsconnect')
install.packages("rsconnect")
rsconnect::setAccountInfo(name='dghendry-info201-autumn-19', token='8825BDFEA478318483E0EB099A11F025', secret='DDIzl7uwEyCBVPyeznu+Ra8EmwY5otLc/GAjUoUM')
getwd()
library(rsconnect)
rsconnect::deployApp(getwd())
shiny::runApp()
runApp()
library(rsconnect)
rsconnect::deployApp(getwd())
