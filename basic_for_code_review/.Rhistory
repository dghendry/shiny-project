faithful
?faithful
?faithful()
?faithful()
?faithful()
View(faithful)
nrow(faithful)
str(faithful)
?hist()
seq()
?seq()
seq(1,3)
t <- seq(1,3)
typeof(t)
class(t)
lenght(t)
legtht(t)
length(t)
v <- seq(from=1, to=10, length.out = 4)
print(v)
v_bins_4 <- seq(from=1, to=10, length.out = 4)
print(v_bins_4)
v_bins_2 <- seq(from=1, to=10, length.out = 2)
print(v_bins_2)
v_bins_10 <- seq(from=1, to=10, length.out = 10)
print(v_bins_10)
?seq()
v_bins_4 <- seq(from=1, to=10, length.out = 4)
print(v_bins_4)
v_bins_2 <- seq(from=1, to=10, length.out = 2)
print(v_bins_2)
v_bins_10 <- seq(from=1, to=10, length.out = 12)
print(v_bins_10)
?seq()
v_bins_4 <- seq(from=1, to=10, length.out = 4)
print(v_bins_4)
v_bins_2 <- seq(from=1, to=10, length.out = 2)
print(v_bins_2)
v_bins_10 <- seq(from=1, to=10, length.out = 10)
print(v_bins_10)
v_bins_20 <- seq(from=1, to=10, length.out = 20)
print(v_bins_20)
v_bins_4 <- seq(from=1, to=10, length.out = 4)
print(v_bins_4)
length(v_bins_4)
?hist()
hist(faithful$waiting)
hist(faithful[,2])
?hist()
hist(x=faithful$waiting, c(10,20,30,40,50))
hist(x=faithful$waiting)
hist(x=faithful$waiting, c(10,20,30))
hist(x=faithful$waiting, breaks=c(10,20,30))
hist(x=faithful$waiting, breaks=c(10,20,30,200))
hist(x=faithful$waiting, breaks=c(50,100,150))
min(faithful$waiting)
max(faithful$waiting)
shiny::runApp()
hist(x=faithful$waiting, breaks=c(50,100,150))
hist(x=faithful$waiting, breaks=c(1,50,100,150))
hist(x=faithful$waiting, breaks=c(1,50,100))
hist(x=faithful$waiting, breaks=c(1,50,100))
hist(x=faithful$waiting, breaks=c(1,00))
hist(x=faithful$waiting, breaks=c(1,100))
hist(x=faithful$waiting, breaks=c(1,25,50,75100))
hist(x=faithful$waiting, breaks=c(1,25,50,75,100))
?hist()
draw_histogram <- function(x_vector, breaks_vector){
hist(x = x_vector,
breaks = breaks_vector,
main ="Main title: Histogram Example: Erruption Durations",
xlab = "Erruption Durations")
}
bins <- c(1,25,50,75,100)
draw_histogram(faithful$waiting,bins)
bins <- c(1,10,20,30,40,50,60,70,80,90,100)
draw_histogram(faithful$waiting,bins)
bins <- seq(1,100, length.out = 11)
draw_histogram(faithful$waiting,bins)
low_bound <- min(faithful$waiting)
hi_bound <- max(faithful$waiting)
num_bins <- 10
bins <- seq(low_bound, hi_bound, num_bins+1)
print(bins)
draw_histogram(faithful$waiting,bins)
bins <- seq(low_bound, hi_bound, num_bins+1)
print(bins)
min(faithful$waiting)
max(faithful$waiting)
bins <- seq(low_bound, hi_bound, length.out=num_bins+1)
print(bins)
draw_histogram(faithful$waiting,bins)
draw_histogram <- function(x_vector, breaks_vector){
hist(x = x_vector,
breaks = breaks_vector,
main ="Main title: Histogram Example:<br> Erruption Durations",
xlab = "Erruption Durations")
}
bins <- c(1,25,50,75,100)
draw_histogram(faithful$waiting,bins)
bins <- c(1,10,20,30,40,50,60,70,80,90,100)
draw_histogram(faithful$waiting,bins)
bins <- seq(1,100, length.out = 11)
draw_histogram(faithful$waiting,bins)
low_bound <- min(faithful$waiting)
hi_bound <- max(faithful$waiting)
draw_histogram <- function(x_vector, breaks_vector){
hist(x = x_vector,
breaks = breaks_vector,
main ="Main title: Histogram Example:\nErruption Durations",
xlab = "Erruption Durations")
}
draw_histogram <- function(x_vector, breaks_vector){
hist(x = x_vector,
breaks = breaks_vector,
main ="Main title: Histogram Example:\nErruption Durations",
xlab = "Erruption Durations")
}
draw_histogram <- function(x_vector, breaks_vector){
hist(x = x_vector,
breaks = breaks_vector,
main ="Main title: Histogram Example:\nErruption Durations",
xlab = "Erruption Durations")
}
hist(x = x_vector,
breaks = breaks_vector,
main ="Main title: Histogram Example:\nErruption Durations",
xlab = "Erruption Durations")
draw_histogram <- function(x_vector, breaks_vector){
hist(x = x_vector,
breaks = breaks_vector,
main ="Main title: Histogram Example:\nErruption Durations",
xlab = "Erruption Durations")
}
bins <- c(1,25,50,75,100)
draw_histogram(faithful$waiting,bins)
bins <- c(1,10,20,30,40,50,60,70,80,90,100)
draw_histogram(faithful$waiting,bins)
bins <- seq(1,100, length.out = 11)
draw_histogram(faithful$waiting,bins)
low_bound <- min(faithful$waiting)
hi_bound <- max(faithful$waiting)
num_bins <- 10
bins <- seq(low_bound, hi_bound, length.out=num_bins+1)
print(bins)
draw_histogram(faithful$waiting,bins)
draw_histogram <- function(x_vector, breaks_vector){
hist(x = x_vector,
breaks = breaks_vector,
main ="Main title: Histogram Example:\nErruption Durations",
xlab = "Erruption Durations",
col = 'red',
border = 'white'
)
}
bins <- c(1,25,50,75,100)
draw_histogram(faithful$waiting,bins)
draw_histogram <- function(x_vector, breaks_vector){
hist(x = x_vector,
breaks = breaks_vector,
main ="Main title: Histogram Example:\nErruption Durations",
xlab = "Erruption Durations",
col = 'chocolate',
border = 'white'
)
}
draw_histogram <- function(x_vector, breaks_vector){
hist(x = x_vector,
breaks = breaks_vector,
main ="Main title: Histogram Example:\nErruption Durations",
xlab = "Erruption Durations",
col = 'chocolate',
border = 'white'
)
}
bins <- c(1,25,50,75,100)
draw_histogram(faithful$waiting,bins)
View(faithful$waiting)
t <- faithful[,2]
View(t)
t <- faithful[,"waiting"]
View(t)
t <- {low_bound <- min(faithful$waiting)
hi_bound <- max(faithful$waiting)
num_bins <- 10
bins <- seq(
from=low_bound,
to=hi_bound,
length.out=num_bins+1)
print(bins)
draw_histogram(faithful$waiting,bins)
}
styler:::style_selection()
piece_of_code <- {
low_bound <- min(faithful$waiting)
hi_bound <- max(faithful$waiting)
num_bins <- 10
bins <- seq(
from = low_bound,
to = hi_bound,
length.out = num_bins + 1
)
print(bins)
draw_histogram(faithful$waiting, bins)
}
piece_of_code <- {
low_bound <- min(faithful$waiting)
hi_bound <- max(faithful$waiting)
num_bins <- 10
bins <- seq(
from = low_bound,
to = hi_bound,
length.out = num_bins + 1
)
draw_histogram(faithful$waiting, bins)
}
print ({
low_bound <- min(faithful$waiting)
hi_bound <- max(faithful$waiting)
num_bins <- 10
bins <- seq(
from = low_bound,
to = hi_bound,
length.out = num_bins + 1
)
draw_histogram(faithful$waiting, bins)
})
print ({
low_bound <- min(faithful$waiting)
hi_bound <- max(faithful$waiting)
num_bins <- 10
bins <- seq(
from = low_bound,
to = hi_bound,
length.out = num_bins + 1
)
draw_histogram(faithful$waiting, bins)
})
print ({
low_bound <- min(faithful$waiting)
hi_bound <- max(faithful$waiting)
num_bins <- 10
bins <- seq(
from = low_bound,
to = hi_bound,
length.out = num_bins + 1
)
draw_histogram(faithful$waiting, bins)
})
?sliderInput()
?interactive()
ui <- fluidPage(
sliderInput("obs", "Number of observations:",
min = 0, max = 1000, value = 500
),
plotOutput("distPlot")
)
runApp("slider_test")
?setwd
getwd
getwd()
?runApp()
# Only run examples in interactive R sessions
if (interactive()) {
options(device.ask.default = FALSE)
ui <- fluidPage(
sliderInput("obs", "Number of observations:",
min = 0, max = 1000, value = 500
),
plotOutput("distPlot")
)
# Server logic
server <- function(input, output) {
output$distPlot <- renderPlot({
hist(rnorm(input$obs))
})
}
# Complete app with UI and server components
shinyApp(ui, server)
}
install.packages("shiney")
library("shiney")
library("shiny")
ggplot(faithful) %>%
geom_point(x=faithful$eruptions, y=faithful$waiting)
library("ggplot")
library("ggplot2")
ggplot(faithful) %>%
geom_point(x=faithful$eruptions, y=faithful$waiting)
ggplot2(faithful) %>%
geom_point(x=faithful$eruptions, y=faithful$waiting)
ggplot2(faithful) %>%
geom_point(mapping = aes(x=faithful$eruptions, y=faithful$waiting))
geom_point
ggplot2(faithful) %>%
geom_point(mapping = aes(x=faithful$eruptions, y=faithful$waiting))
ggplot2(faithful) +
geom_point(mapping = aes(x=faithful$eruptions, y=faithful$waiting))
ggplot(faithful) +
geom_point(mapping = aes(x=faithful$eruptions, y=faithful$waiting))
runApp()
# Only run examples in interactive R sessions
if (interactive()) {
options(device.ask.default = FALSE)
ui <- fluidPage(
sliderInput("obs", "Number of observations:",
min = 0, max = 1000, value = 500
),
plotOutput("distPlot")
)
# Server logic
server <- function(input, output) {
output$distPlot <- renderPlot({
hist(rnorm(input$obs))
})
}
# Complete app with UI and server components
shinyApp(ui, server)
}
?htmlOutput
?tags
runApp()
runApp()
?textOutput()
runApp()
runApp()
?tags()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
?renderUI
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp('app_extension_1.R')
runApp('app_extension_1.R')
runApp('app_extension_1.R')
runApp('app_extension_1.R')
?markdown:markdownToHTML
?markdown:markdownToHTML
?markdownToHTML
runApp('app_extension_1.R')
runApp('app_extension_1.R')
runApp('app_extension_1.R')
runApp('app_extension_1.R')
runApp('app_extension_1.R')
runApp('app_extension_1.R')
?renderUI
runApp('app_extension_1.R')
runApp('app_extension_1.R')
runApp('app_extension_1.R')
runApp('app_extension_1.R')
runApp('app_extension_1.R')
runApp('app_extension_1.R')
runApp('app_extension_1.R')
runApp('app_extension_1.R')
runApp('app_extension_1.R')
runApp('app_extension_1.R')
runApp('app_extension_1.R')
runApp('app_extension_1.R')
runApp('app_extension_1.R')
rm(list=ls())
runApp('app_test_1.R')
HelloWorld <- function(...) {
arguments <- list(...)
paste(arguments)
}
HelloWorld("a", "b", "c")
debug_msg <- function(...) {
if (debug_on) {
arguments <- list(...)
msg <- paste(...)
print(msg)
}
}
debug_on = TRUE
# This will remove all variables from the environment
if (debug_on) {
rm(list=ls())
}
debug_msg <- function(...) {
if (debug_on) {
arguments <- list(...)
msg <- paste(...)
print(msg)
}
}
debug_msg("in: function_x()", "val1", "val2", "val3")
# filename: debug_functions.R
#----------------------------------------------
# A very simple tool for code comprehension and
# debugging
#----------------------------------------------
debug_on = TRUE
# This will remove all variables from the environment
if (debug_on) {
rm(list=ls())
}
debug_msg <- function(...) {
if (debug_on) {
arguments <- list(...)
msg <- paste(...)
print(msg)
}
}
# filename: debug_functions.R
#----------------------------------------------
# A very simple tool for code comprehension and
# debugging
#----------------------------------------------
debug_on = TRUE
# This will remove all variables from the environment
if (debug_on) {
rm(list=ls())
debug_on = TRUE
}
debug_msg <- function(...) {
if (debug_on) {
arguments <- list(...)
msg <- paste(...)
print(msg)
}
}
debug_msg("in: function_x()", "val1", "val2", "val3")
styler:::style_selection()
